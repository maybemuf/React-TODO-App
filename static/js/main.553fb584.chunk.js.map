{"version":3,"sources":["reportWebVitals.js","images/icon-moon.svg","images/icon-sun.svg","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","localStorage","getItem","setItem","task","done","map","item","JSON","stringify","join","root","document","getElementById","body","classList","add","TODOApp","props","state","taskList","split","parse","inputValue","showList","handleInputChange","bind","handleInputSumbit","handleButtonClick","handleCheckboxChange","handleRemoveButton","clearCompleted","setTimeout","querySelectorAll","remove","querySelector","checked","this","checkForCompleted","themeBtn","src","sun","alt","moon","list","i","taskItem","push","event","getElementsByClassName","setState","target","value","check","trim","preventDefault","newTaskList","createTask","filltered","filter","undefined","length","className","onClick","chanegeTheme","activeTasks","calculateActive","React","Component","TODOInput","handleTextChange","handleSubmit","onSubmit","type","placeholder","onChange","TODOListPlaceholder","TODOList","closest","tagName","textBox","offsetWidth","style","marginLeft","index","id","onMouseEnter","handleBigText","onMouseLeave","handleBigTextReset","TODOStatus","TODONavigation","ReactDOM","render"],"mappings":"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","file":"static/js/main.553fb584.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default __webpack_public_path__ + \"static/media/icon-moon.6c03114b.svg\";","export default __webpack_public_path__ + \"static/media/icon-sun.910b1f9a.svg\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport moon from './images/icon-moon.svg'\nimport sun from './images/icon-sun.svg'\n\nconst TaskList = [\n    {\n        task: \"Create a new TODO!\",\n        done: false\n    },\n]\n\nif(!localStorage.getItem('TaskList')){\n    localStorage.setItem(\"TaskList\", TaskList.map((item) => JSON.stringify(item)).join(\";\"));\n}\nlet root = document.getElementById('root');\ndocument.body.classList.add(\"light_theme\");\n\nclass TODOApp extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            taskList: localStorage.getItem(\"TaskList\").split(\";\").map((item) => JSON.parse(item)),\n            inputValue: '',\n            showList: 'all',\n        };\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleInputSumbit = this.handleInputSumbit.bind(this);\n        this.handleButtonClick = this.handleButtonClick.bind(this);\n        this.handleCheckboxChange = this.handleCheckboxChange.bind(this);\n        this.handleRemoveButton = this.handleRemoveButton.bind(this);\n        this.clearCompleted = this.clearCompleted.bind(this);\n    }\n\n    checkForCompleted(){\n        setTimeout(() =>{\n            for(let item of document.querySelectorAll(\".todo_list_item\")) {\n                item.classList.remove(\"task_done\");\n                if(item.querySelector(\".todo_list_checkbox\").checked) item.classList.add(\"task_done\");\n            }\n        },0)\n    }\n\n    componentDidMount() {\n        this.checkForCompleted()\n        let themeBtn = document.querySelector(\".switch_btn\");\n        if(localStorage.getItem(\"theme\") === \"sun\") {\n            themeBtn.src = sun;\n            themeBtn.alt = \"sun\";\n            document.body.classList.remove(\"light_theme\")\n            document.body.classList.add(\"dark_theme\");\n        }\n        else if(localStorage.getItem(\"theme\") === \"moon\") {\n            themeBtn.src = moon;\n            themeBtn.alt = \"moon\";\n            document.body.classList.remove(\"dark_theme\")\n            document.body.classList.add(\"light_theme\");\n        }\n    }\n\n    calculateActive(list) {\n        let i = 0;\n        for(let item of list) {\n            if(!item.done) i += 1;\n        }\n        return i;\n    }\n\n    createTask(list, taskItem) {\n        list.push({\n            task: taskItem,\n            done: false,\n        });\n    }\n\n    handleButtonClick(event) {\n        for(let btn of document.getElementsByClassName(\"nav_btn\")) btn.classList.remove('selected')\n        this.setState({\n            showList: event.target.value\n        });\n        event.target.classList.add(\"selected\");\n        this.checkForCompleted()\n    }\n\n    handleInputChange(event) {\n        this.setState({\n            inputValue: event.target.value\n        });\n    }\n\n    handleInputSumbit(event){\n        let check = true;\n        for(let task of this.state.taskList) {\n            if(task.task === this.state.inputValue) check = false;\n        }\n\n        if(this.state.inputValue.trim() === '') event.preventDefault();\n        else if (check) {\n            let newTaskList = this.state.taskList;\n            if(newTaskList[0].task === \"Create a new TODO!\" && newTaskList[0].done === false) {\n                newTaskList[0].done = true;\n                this.checkForCompleted();\n            }\n            this.createTask(newTaskList, this.state.inputValue);\n            localStorage.setItem(\"TaskList\", newTaskList.map((item) => JSON.stringify(item)).join(\";\"));\n            this.setState({\n                taskList: localStorage.getItem(\"TaskList\").split(\";\").map((item) => JSON.parse(item)),\n                inputValue: '',\n            });\n            event.preventDefault();\n        }\n        \n        else {\n            this.setState({\n                inputValue: '',\n            });\n            event.preventDefault();\n        }\n    }\n\n    handleCheckboxChange(event) {\n        let newTaskList = this.state.taskList;\n        for(let item of newTaskList) {\n            if(event.target.value === item.task) item.done = !item.done;\n        }\n        localStorage.setItem(\"TaskList\", newTaskList.map((item) => JSON.stringify(item)).join(\";\"));\n        this.setState({\n            taskList: newTaskList,\n        })\n    }\n\n    handleRemoveButton(event) {\n        let newTaskList = this.state.taskList;\n        let filltered = newTaskList.filter((item) => item.task !== event.target.value);\n        if(filltered === undefined) {\n            filltered = [];\n        }\n        localStorage.setItem(\"TaskList\", filltered.map((item) => JSON.stringify(item)).join(\";\"));\n        this.setState({\n            taskList: filltered,\n        })\n        this.checkForCompleted();\n    }\n\n    clearCompleted() {\n        let newTaskList = this.state.taskList;\n        let filltered = newTaskList.filter((item) => !item.done);\n        localStorage.setItem(\"TaskList\", filltered.map((item) => JSON.stringify(item)).join(\";\"));\n        this.setState({\n            taskList: filltered,\n        })\n        this.checkForCompleted();\n    }\n\n    chanegeTheme(event){\n        if(localStorage.getItem(\"theme\") === \"moon\") {\n            event.target.src = sun;\n            event.target.alt = \"sun\";\n            document.body.classList.remove(\"light_theme\")\n            document.body.classList.add(\"dark_theme\");\n        }\n        else if(localStorage.getItem(\"theme\") === \"sun\") {\n            event.target.src = moon;\n            event.target.alt = \"moon\";\n            document.body.classList.remove(\"dark_theme\")\n            document.body.classList.add(\"light_theme\");\n        } \n        localStorage.setItem(\"theme\", event.target.alt)\n    }\n    render() {\n        if(this.state.taskList.length === 0) {\n            return(\n                <div className=\"container\">\n                    <div className=\"todo_header\">\n                        <h1>TODO</h1>\n                        <img className=\"switch_btn\" onClick={this.chanegeTheme} src={moon} alt=\"moon\"/>\n                    </div>\n                    <TODOInput value={this.state.inputValue} handleInputChange={this.handleInputChange} handleInputSumbit={this.handleInputSumbit} />\n                     \n                    <div className=\"todo_listbox\">\n                        <TODOListPlaceholder />\n                    </div>\n    \n                    <TODONavigation handleButtonClick={this.handleButtonClick} />\n                </div>\n            )\n        }\n        else {\n            return(\n                <div className=\"container\">\n                    <div className=\"todo_header\">\n                        <h1>TODO</h1>\n                        <img className=\"switch_btn\" onClick={this.chanegeTheme} src={moon} alt=\"moon\"/>\n                    </div>\n                    <TODOInput value={this.state.inputValue} handleInputChange={this.handleInputChange} handleInputSumbit={this.handleInputSumbit} />\n                    <div className=\"todo_listbox\">\n                        <TODOList taskList={this.state.taskList} showList={this.state.showList} handleCheckboxChange={this.handleCheckboxChange} handleRemoveButton={this.handleRemoveButton}/>\n                        <TODOStatus  activeTasks={this.calculateActive(this.state.taskList)} clearCompleted={this.clearCompleted}/>\n                    </div>\n    \n                    <TODONavigation handleButtonClick={this.handleButtonClick} />\n                </div>\n            )\n        }\n    }\n}\n\nclass TODOInput extends React.Component {\n    constructor(props){\n        super(props);\n        this.handleTextChange = this.handleTextChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleTextChange(event) {\n        this.props.handleInputChange(event);\n    }\n\n    handleSubmit(event) {\n        this.props.handleInputSumbit(event);\n    }\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit} className=\"todo_form\">\n                <input type=\"text\" className=\"todo_input\" placeholder=\"Create a new todo...\" value={this.props.value} onChange={this.handleTextChange} />\n            </form>\n        )\n    }\n}\n\n\nclass TODOListPlaceholder extends React.Component {\n    render() {\n        return(\n            <div className=\"list_placeholder\">\n                <h2>Wow! you've done everyhing you want.<br/>Good job, keep working!</h2>\n            </div>\n        )\n    }\n}\n\nclass TODOList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleCheckboxChange = this.handleCheckboxChange.bind(this);\n        this.handleRemoveButton = this.handleRemoveButton.bind(this);\n    }\n\n    handleCheckboxChange(event) {\n        this.props.handleCheckboxChange(event);\n        setTimeout(() => {\n            if(event.target.checked) event.target.closest(\"li\").classList.add(\"task_done\");\n        else event.target.closest(\"li\").classList.remove(\"task_done\");\n        }, 0);\n    }\n    \n    handleRemoveButton(event) {\n        this.props.handleRemoveButton(event);\n    }\n\n    handleBigText(event) {\n        let item = event.target;\n        if(item.tagName !== \"LI\" ) item = item.closest(\"li\");\n        let textBox = item.querySelector(\".todo_list_item_text\")\n        if(textBox.offsetWidth > item.offsetWidth) {\n            textBox.style.marginLeft = -(textBox.offsetWidth - item.offsetWidth + 70) + \"px\";\n        }\n    }\n\n    handleBigTextReset(event) {\n        let item = event.target;\n        if(item.tagName !== \"LI\" ) item = item.closest(\"li\");\n        let textBox = item.querySelector(\".todo_list_item_text\")\n        textBox.style.marginLeft = \"30px\";\n    }\n\n    render(){\n        if(this.props.showList === \"all\") {\n            return (\n                <ul className=\"todo_list\">\n                    {this.props.taskList.map((item, index) => <li key={index} className=\"todo_list_item\">\n                        <div className=\"wrapper_div\">\n                            <form className=\"checkbox_form\">\n                                <label className=\"checkbox_label\">\n                                    <input id={index} className=\"todo_list_checkbox\" type=\"checkbox\" value={item.task} checked={item.done} onChange={this.handleCheckboxChange}></input>\n                                </label>\n                            </form>\n                            <p className=\"todo_list_item_text\" onMouseEnter={this.handleBigText} onMouseLeave={this.handleBigTextReset}>{item.task}</p>\n                            <button value={item.task} className=\"remove_btn\" onClick={this.handleRemoveButton}>X</button>\n                        </div>\n                    </li>)}\n                </ul>\n            )\n        }\n        else if(this.props.showList === \"active\"){\n            return (\n                <ul className=\"todo_list\">\n                    {this.props.taskList.filter((item) => !item.done).map((item, index) => <li key={index} className=\"todo_list_item\" >\n                        <div className=\"wrapper_div\">\n                            <form className=\"checkbox_form\">\n                                <label className=\"checkbox_label\">\n                                    <input id={index} className=\"todo_list_checkbox\" type=\"checkbox\" value={item.task} checked={item.done} onChange={this.handleCheckboxChange}></input>\n                                </label>\n                            </form>\n                            <p className=\"todo_list_item_text\" onMouseEnter={this.handleBigText} onMouseLeave={this.handleBigTextReset}>{item.task}</p>\n                            <button value={item.task} className=\"remove_btn\" onClick={this.handleRemoveButton}>X</button>\n                        </div>\n                    </li>)}\n                </ul>\n            )\n        }\n        else if(this.props.showList === \"completed\"){\n            return (\n                <ul className=\"todo_list\">\n                    {this.props.taskList.filter((item) => item.done).map((item, index) => <li key={index} className=\"todo_list_item\" >\n                        <div className=\"wrapper_div\">\n                            <form className=\"checkbox_form\">\n                                <label className=\"checkbox_label\">\n                                    <input id={index} className=\"todo_list_checkbox\" type=\"checkbox\" value={item.task} checked={item.done} onChange={this.handleCheckboxChange}></input>\n                                </label>\n                            </form>\n                            <p className=\"todo_list_item_text\" onMouseEnter={this.handleBigText} onMouseLeave={this.handleBigTextReset}>{item.task}</p>\n                            <button value={item.task} className=\"remove_btn\" onClick={this.handleRemoveButton}>X</button>\n                        </div>\n                    </li>)}\n                </ul>\n            )\n        }\n    }\n}\n\n\n\nclass TODOStatus extends React.Component {\n    constructor(props) {\n        super(props);\n        this.clearCompleted = this.clearCompleted.bind(this);\n    }\n    \n    clearCompleted() {\n        this.props.clearCompleted()\n    }\n\n    render() {\n        return (\n            <div className=\"todo_status\">\n                <span>{this.props.activeTasks} items left</span>\n                <button onClick={this.clearCompleted}>Clear Completed</button>\n            </div>\n        )\n    }\n}\n\nclass TODONavigation extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleButtonClick = this.handleButtonClick.bind(this);\n    }\n    \n    handleButtonClick(event) {\n        this.props.handleButtonClick(event);\n    }\n\n    render() {\n        return(\n            <div className=\"todo_navigation\">\n                <button className=\"nav_btn selected\" value=\"all\" onClick={this.handleButtonClick}>All</button>\n                <button className=\"nav_btn\" value=\"active\" onClick={this.handleButtonClick}>Active</button>\n                <button className=\"nav_btn\" value=\"completed\" onClick={this.handleButtonClick}>Completed</button>\n            </div>\n        )\n    }\n}\n\n ReactDOM.render(<TODOApp />, root);\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}